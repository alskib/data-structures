-- user end of generic stack

WITH Ada.Text_IO; USE Ada.Text_IO;
WITH Ada.Exceptions; USE Ada.Exceptions;
WITH G_Stack;
WITH Unchecked_Conversion;

PROCEDURE Main IS
   TYPE MonthName IS (January, February, March, April, May, June, July, August, September, October, November, December, DONE);
   TYPE DateType IS RECORD
      Month: MonthName;
      Day: Integer RANGE 1..31;
      Year: Integer;
   END RECORD;

   PACKAGE MonthNameIO IS NEW Ada.Text_IO.Enumeration_IO(MonthName); USE MonthnameIO;
   PACKAGE MyInt_IO IS NEW Ada.Text_IO.Integer_IO(Integer); USE MyInt_IO;

   FUNCTION IntToChar IS NEW Unchecked_Conversion(Integer, Character);
   FUNCTION CharToInt IS NEW Unchecked_Conversion(Character, Integer);

   Count: Integer := 0;
   In_Char : Character;
   In_Int, Stacktype : Integer;
   In_Date : Datetype;
   StackSize : Integer := 5;
   Did_It_Work : Boolean;

   BEGIN
      LOOP
         Main_Menu:
         LOOP
            Put_Line("Stack menu");
            Put_Line("----------");
            Put_Line("1. Character");
            Put_Line("2. Integer");
            Put_Line("3. Date");
            Put_Line("4. EXIT");
            New_Line;
            Put("> ");
            Get(StackType);
            EXIT Main_Menu WHEN Stacktype = 1 OR Stacktype = 2 OR Stacktype = 3 OR Stacktype = 4;
            Put("Input error. Enter 1 through 4.");
         END LOOP Main_Menu;
         EXIT WHEN Stacktype = 4;
         New_Line;
         Put_Line("Enter stack size: ");
         New_Line;
         Put("> ");
         Get(Stacksize);
         CASE Stacktype IS
            WHEN 1 =>
               CHARACTER_CASE;
               DECLARE
                  PACKAGE Character_Stack IS NEW G_Stack(Stacksize, Character);
                  USE Character_Stack;
               BEGIN
                  LOOP
                     Put_Line("Stack Operations");
                     Put_Line("----------------");
                     Put_Line("1. Push");
                     Put_Line("2. Pop");
                     Put_Line("3. EXIT (empty stack)");
                     New_Line;
                     Put("> ");
                     Get(In_Int);
                     EXIT WHEN In_Int = 3;
                     CASE In_Int IS
                        WHEN 1 =>
                           CHAR_PUSH;
                           BEGIN
                              Did_It_Work := True;
                              Cout := 0;
                              Put_Line("Push what? (End string with #)");
                              Put("> ");
                              LOOP
                                 Get(In_Char);
                                 EXIT WHEN In_Char = '#' OR Did_It_Work := False;
                                 Push(In_Char, Did_It_Work);
                                 IF Did_It_Work = True THEN
                                    Count := Count + 1;
                                 END IF;
                              END LOOP
                                 IF Did_It_Work = True THEN
                                 In_Char := IntToChar(Count);
                                 Push(In_Char, Did_It_Work);
                              END IF
                                 IF Did_It_Work = False THEN
                                 FOR I IN 1..Count LOOP
                                    Pop(In_Char, Did_It_Work);
                                 END LOOP;
                                 Skip_Line;
                              END IF;
                           END CHAR_PUSH;
                           WHEN 2 =>
                           CHAR_POP;
                        BEGIN
                           Pop(In_Char, Did_It_Work);
                           IF Did_It_Work = True THEN
                              So Continue
                                 Count := CharToInt(In_Char);
                              Put(Count);
                              WHILE Count > 0 LOOP
                                 Pop(In_Char, Did_It_Work);
                                 Put(In_Char);
                                 Count := Count - 1;
                              END LOOP;
                              New_Line;
                           END IF;
                        END CHAR_POP;
                        WHEN OTHERS =>
                     BEGIN
                        Put_Line("Input error.");
                     END;
                  END CASE;
               END LOOP;
            END CHARACTER_CASE;

            WHEN 2 =>
            INTEGER_CASE:
               DECLARE
               PACKAGE Integer_Stack IS NEW G_Stack(StackSize, Integer);
               USE Integer_Stack;
            BEGIN
               LOOP
                  Put_Line("Stack Operations");
                  Put_Line("----------------");
                  Put_Line("1. Push");
                  Put_Line("2. Pop");
                  Put_Line("3. EXIT (empty stack)");
                  New_Line;
                  Put("> ");
                  Get(In_Int);
                  EXIT WHEN In_Int = 3;
                  CASE In_Int IS
                     WHEN 1 =>
                        INT_PUSH;
                        BEGIN
                           Did_It_Work := True;
                           Count := 0;
                           Put_Line("Push what? (Separated by commas, terminate with 0");
                           Put("> ");
                           LOOP
                              Get(In_Int);
                              EXIT WHEN In_Int = 0 OR Did_It_Work := False;
                              Push(In_Int, Did_It_Work);
                              IF Did_It_Work = True THEN
                                 Count := Count + 1;
                              END IF;
                              Get(In_Char);
                           END LOOP;
                           IF Did_It_Work = True THEN
                              Push(Count, Did_It_Work);
                           END IF;
                           IF Did_It_Work = False THEN
                              FOR I IN 1..Count LOOP
                                 Pop(In_Int, Did_It_Work);
                              END LOOP;
                              Skip_Line;
                           END IF;
                        END INT_PUSH;
                        WHEN 2 =>
                        INT_POP:
                        BEGIN
                           Pop(Count, Did_It_Work);
                           IF Did_It_Work = True THEN
                              Put(Count);
                              WHILE Count > 0 LOOP
                                 Pop(In_Int, Did_It_Work);
                                 Put(In_Int);
                                 Put(", ");
                                 Count := Count - 1;
                              END LOOP;
                              New_Line;
                           END IF;
                        END INT_POP;
                        WHEN OTHERS =>
                     BEGIN
                        Put_Line("Input error.");
                     END;
                  END CASE;
               END LOOP;
            END INTEGER_CASE;

            WHEN 3 =>
            DATE_CASE;
            DECLARE
               PACKAGE Date_Stack IS NEW G_Stack(Stacksize, Datetype);
               USE Date_Stack;
            BEGIN
               LOOP
                  Put_Line("Stack Operations");
                  Put_Line("----------------");
                  Put_Line("1. Push");
                  Put_Line("2. Pop");
                  Put_Line("3. EXIT (empty stack)");
                  New_Line;
                  Put("> ");
                  Get(In_Int);
                  EXIT WHEN In_Int = 3;
                  CASE In_Int IS
                     WHEN 1 =>
                        DATE_PUSH:
                           BEGIN
                              Did_It_Work = True;
                              Count := 0;
                              Put_Line("Push what? (ex: 'January 31, 1970; DONE', delineated with semi-colons, terminate with DONE");
                              Put("> ");
                              LOOP
                                 Get(In.Date.Month); -- January
                                 EXIT WHEN In_Date.Month = Done OR Did_It_Work = False;
                                 Get(In_Date.Day);   -- 31
                                 Get(In_Char);       -- ,
                                 Get(In_Date.Year);  -- 1970
                                 Get(In_Char);       -- ;
                                 Push(In_Date, Did_It_Work);
                                 IF Did_It_Work = True THEN
                                    Count := Count + 1;
                                 END IF;
                              END LOOP;

